defmodule LzfTest do
  use ExUnit.Case

  test "uncompressed chunk" do
  end

  test "compressed chunk" do
    expected = """
    At file or stream level, LZF compressed content consists of a simple sequence of chunks.
    Chunks consists of simple header and payload.
    There are no chunk separators, nor sequence numbers or other kind of metadata.
    This means that one can simply keep on appending chunks at the end of stream or file.
    """

    compressed =
      <<0x5A, 0x56, 0x01, 0x00, 0xFE, 0x01, 0x2C, 0x1F, 0x41, 0x74, 0x20, 0x66, 0x69, 0x6C, 0x65,
        0x20, 0x6F, 0x72, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x20, 0x6C, 0x65, 0x76, 0x65,
        0x6C, 0x2C, 0x20, 0x4C, 0x5A, 0x46, 0x20, 0x63, 0x6F, 0x6D, 0x06, 0x70, 0x72, 0x65, 0x73,
        0x73, 0x65, 0x64, 0x20, 0x0A, 0x04, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x40, 0x07, 0x0E, 0x73,
        0x69, 0x73, 0x74, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6D, 0x70, 0x20,
        0x3C, 0x06, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6E, 0x63, 0x20, 0x45, 0x0A, 0x66, 0x20, 0x63,
        0x68, 0x75, 0x6E, 0x6B, 0x73, 0x2E, 0x0A, 0x43, 0x60, 0x07, 0xE0, 0x04, 0x2F, 0xA0, 0x2D,
        0x1A, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x70, 0x61, 0x79,
        0x6C, 0x6F, 0x61, 0x64, 0x2E, 0x0A, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x20, 0x03,
        0x01, 0x6E, 0x6F, 0x80, 0x42, 0x20, 0x54, 0x08, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6F, 0x72,
        0x73, 0x2C, 0x20, 0x14, 0x20, 0x9E, 0xC0, 0x64, 0x05, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72,
        0x20, 0x81, 0x03, 0x72, 0x20, 0x6F, 0x74, 0x20, 0x37, 0x02, 0x20, 0x6B, 0x69, 0x20, 0x4A,
        0x20, 0x7A, 0x07, 0x6D, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x40, 0x4E, 0x01, 0x69,
        0x73, 0x20, 0x0E, 0x0F, 0x61, 0x6E, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6F, 0x6E,
        0x65, 0x20, 0x63, 0x61, 0x6E, 0x80, 0x81, 0x05, 0x79, 0x20, 0x6B, 0x65, 0x65, 0x70, 0x20,
        0x13, 0x09, 0x20, 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x80, 0x72, 0x01,
        0x73, 0x20, 0x20, 0x2A, 0x20, 0x51, 0x00, 0x20, 0x20, 0x14, 0x40, 0x4F, 0xA1, 0x10, 0x20,
        0x67, 0x41, 0x22, 0x01, 0x2E, 0x0A>>

    decompressed = Lzf.decompress(compressed)
    assert decompressed == expected
  end

  test "plain chunk" do
    expected = "abcdefghij"
    compressed = <<0x5A, 0x56, 0x00, 0x00, 0x0A, "abcdefghij">>
    decompressed = Lzf.decompress(compressed)
    assert decompressed == expected
  end

  test "whole file" do
    original = File.read!("8k.txt")
    compressed = File.read!("8k.txt.lzf")
    decompressed = Lzf.decompress(compressed)
    assert original == decompressed
  end

  # This checks for multi-chunk parsing.
  test "large file" do
    original = File.read!("160k.txt")
    compressed = File.read!("160k.txt.lzf")
    decompressed = Lzf.decompress(compressed)
    assert original == decompressed
  end
end
